/*
 * generated by Xtext 2.25.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.lilypond.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.lilypond.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.lilypond.services.DslGrammarAccess;

}

@parser::members {

 	private DslGrammarAccess grammarAccess;

    public InternalDslParser(TokenStream input, DslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "File";
   	}

   	@Override
   	protected DslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current; }
	EOF;

// Rule File
ruleFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFileAccess().getFileAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getPhrasesPhraseParserRuleCall_1_0());
				}
				lv_phrases_1_0=rulePhrase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					add(
						$current,
						"phrases",
						lv_phrases_1_0,
						"org.xtext.lilypond.Dsl.Phrase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getSongSongParserRuleCall_2_0());
				}
				lv_song_2_0=ruleSong
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					set(
						$current,
						"song",
						lv_song_2_0,
						"org.xtext.lilypond.Dsl.Song");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getPhrasesPhraseParserRuleCall_3_0());
				}
				lv_phrases_3_0=rulePhrase
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					add(
						$current,
						"phrases",
						lv_phrases_3_0,
						"org.xtext.lilypond.Dsl.Phrase");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRulePhrase
entryRulePhrase returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPhraseRule()); }
	iv_rulePhrase=rulePhrase
	{ $current=$iv_rulePhrase.current; }
	EOF;

// Rule Phrase
rulePhrase returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getPhraseAccess().getPhraseAction_0(),
					$current);
			}
		)
		otherlv_1='phrase'
		{
			newLeafNode(otherlv_1, grammarAccess.getPhraseAccess().getPhraseKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_ID
				{
					newLeafNode(lv_name_2_0, grammarAccess.getPhraseAccess().getNameIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getPhraseRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPhraseAccess().getBodyBodyParserRuleCall_3_0());
				}
				lv_body_3_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPhraseRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"org.xtext.lilypond.Dsl.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleSong
entryRuleSong returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSongRule()); }
	iv_ruleSong=ruleSong
	{ $current=$iv_ruleSong.current; }
	EOF;

// Rule Song
ruleSong returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getSongAccess().getSongAction_0(),
					$current);
			}
		)
		otherlv_1='song'
		{
			newLeafNode(otherlv_1, grammarAccess.getSongAccess().getSongKeyword_1());
		}
		(
			(
				lv_name_2_0=RULE_STRING
				{
					newLeafNode(lv_name_2_0, grammarAccess.getSongAccess().getNameSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getSongRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getSongAccess().getBodyBodyParserRuleCall_3_0());
				}
				lv_body_3_0=ruleBody
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSongRule());
					}
					set(
						$current,
						"body",
						lv_body_3_0,
						"org.xtext.lilypond.Dsl.Body");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleBody
entryRuleBody returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getBodyRule()); }
	iv_ruleBody=ruleBody
	{ $current=$iv_ruleBody.current; }
	EOF;

// Rule Body
ruleBody returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getBodyAccess().getBodyAction_0(),
					$current);
			}
		)
		otherlv_1='{'
		{
			newLeafNode(otherlv_1, grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getBodyAccess().getContentItemParserRuleCall_2_0());
				}
				lv_content_2_0=ruleItem
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getBodyRule());
					}
					add(
						$current,
						"content",
						lv_content_2_0,
						"org.xtext.lilypond.Dsl.Item");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_3='}'
		{
			newLeafNode(otherlv_3, grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleItem
entryRuleItem returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemRule()); }
	iv_ruleItem=ruleItem
	{ $current=$iv_ruleItem.current; }
	EOF;

// Rule Item
ruleItem returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getItemAccess().getNoteItemAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getItemAccess().getNoteNoteParserRuleCall_0_1_0());
					}
					lv_note_1_0=ruleNote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getItemRule());
						}
						set(
							$current,
							"note",
							lv_note_1_0,
							"org.xtext.lilypond.Dsl.Note");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getItemAccess().getPhraseItemAction_1_0(),
						$current);
				}
			)
			otherlv_3='\\'
			{
				newLeafNode(otherlv_3, grammarAccess.getItemAccess().getBackslashKeyword_1_1());
			}
			(
				(
					lv_phrase_4_0=RULE_ID
					{
						newLeafNode(lv_phrase_4_0, grammarAccess.getItemAccess().getPhraseIDTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getItemRule());
						}
						setWithLastConsumed(
							$current,
							"phrase",
							lv_phrase_4_0,
							"org.eclipse.xtext.common.Terminals.ID");
					}
				)
			)
		)
	)
;

// Entry rule entryRuleNote
entryRuleNote returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNoteRule()); }
	iv_ruleNote=ruleNote
	{ $current=$iv_ruleNote.current; }
	EOF;

// Rule Note
ruleNote returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNoteAccess().getNoteAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNoteAccess().getNameNoteNameEnumRuleCall_1_0());
				}
				lv_name_1_0=ruleNoteName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNoteRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.lilypond.Dsl.NoteName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNoteAccess().getOctaveOctaveParserRuleCall_2_0());
				}
				lv_octave_2_0=ruleOctave
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNoteRule());
					}
					set(
						$current,
						"octave",
						lv_octave_2_0,
						"org.xtext.lilypond.Dsl.Octave");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				lv_duration_3_0=RULE_INT
				{
					newLeafNode(lv_duration_3_0, grammarAccess.getNoteAccess().getDurationINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNoteRule());
					}
					setWithLastConsumed(
						$current,
						"duration",
						lv_duration_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
		(
			(
				lv_syllable_4_0=RULE_STRING
				{
					newLeafNode(lv_syllable_4_0, grammarAccess.getNoteAccess().getSyllableSTRINGTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNoteRule());
					}
					setWithLastConsumed(
						$current,
						"syllable",
						lv_syllable_4_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)?
	)
;

// Entry rule entryRuleOctave
entryRuleOctave returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOctaveRule()); }
	iv_ruleOctave=ruleOctave
	{ $current=$iv_ruleOctave.current; }
	EOF;

// Rule Octave
ruleOctave returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOctaveAccess().getIsAction_0_0(),
						$current);
				}
			)
			otherlv_1='+'
			{
				newLeafNode(otherlv_1, grammarAccess.getOctaveAccess().getPlusSignKeyword_0_1());
			}
			(
				(
					lv_value_2_0=RULE_INT
					{
						newLeafNode(lv_value_2_0, grammarAccess.getOctaveAccess().getValueINTTerminalRuleCall_0_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOctaveRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_2_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOctaveAccess().getEsAction_1_0(),
						$current);
				}
			)
			otherlv_4='-'
			{
				newLeafNode(otherlv_4, grammarAccess.getOctaveAccess().getHyphenMinusKeyword_1_1());
			}
			(
				(
					lv_value_5_0=RULE_INT
					{
						newLeafNode(lv_value_5_0, grammarAccess.getOctaveAccess().getValueINTTerminalRuleCall_1_2_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOctaveRule());
						}
						setWithLastConsumed(
							$current,
							"value",
							lv_value_5_0,
							"org.eclipse.xtext.common.Terminals.INT");
					}
				)
			)
		)
	)
;

// Rule NoteName
ruleNoteName returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='a'
			{
				$current = grammarAccess.getNoteNameAccess().getAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNoteNameAccess().getAEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='b'
			{
				$current = grammarAccess.getNoteNameAccess().getBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNoteNameAccess().getBEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='c'
			{
				$current = grammarAccess.getNoteNameAccess().getCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNoteNameAccess().getCEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='d'
			{
				$current = grammarAccess.getNoteNameAccess().getDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getNoteNameAccess().getDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='e'
			{
				$current = grammarAccess.getNoteNameAccess().getEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getNoteNameAccess().getEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='f'
			{
				$current = grammarAccess.getNoteNameAccess().getFEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getNoteNameAccess().getFEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='g'
			{
				$current = grammarAccess.getNoteNameAccess().getGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getNoteNameAccess().getGEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
