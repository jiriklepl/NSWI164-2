/**
 * generated by Xtext 2.25.0
 */
package org.xtext.lilypond.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.xtext.lilypond.dsl.DslPackage;
import org.xtext.lilypond.dsl.File;
import org.xtext.lilypond.dsl.Phrase;
import org.xtext.lilypond.dsl.Song;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>File</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.lilypond.dsl.impl.FileImpl#getPhrases <em>Phrases</em>}</li>
 *   <li>{@link org.xtext.lilypond.dsl.impl.FileImpl#getSong <em>Song</em>}</li>
 * </ul>
 *
 * @generated
 */
public class FileImpl extends MinimalEObjectImpl.Container implements File
{
  /**
   * The cached value of the '{@link #getPhrases() <em>Phrases</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPhrases()
   * @generated
   * @ordered
   */
  protected EList<Phrase> phrases;

  /**
   * The cached value of the '{@link #getSong() <em>Song</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSong()
   * @generated
   * @ordered
   */
  protected Song song;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected FileImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.FILE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Phrase> getPhrases()
  {
    if (phrases == null)
    {
      phrases = new EObjectContainmentEList<Phrase>(Phrase.class, this, DslPackage.FILE__PHRASES);
    }
    return phrases;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Song getSong()
  {
    return song;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSong(Song newSong, NotificationChain msgs)
  {
    Song oldSong = song;
    song = newSong;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.FILE__SONG, oldSong, newSong);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setSong(Song newSong)
  {
    if (newSong != song)
    {
      NotificationChain msgs = null;
      if (song != null)
        msgs = ((InternalEObject)song).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.FILE__SONG, null, msgs);
      if (newSong != null)
        msgs = ((InternalEObject)newSong).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.FILE__SONG, null, msgs);
      msgs = basicSetSong(newSong, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.FILE__SONG, newSong, newSong));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.FILE__PHRASES:
        return ((InternalEList<?>)getPhrases()).basicRemove(otherEnd, msgs);
      case DslPackage.FILE__SONG:
        return basicSetSong(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.FILE__PHRASES:
        return getPhrases();
      case DslPackage.FILE__SONG:
        return getSong();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.FILE__PHRASES:
        getPhrases().clear();
        getPhrases().addAll((Collection<? extends Phrase>)newValue);
        return;
      case DslPackage.FILE__SONG:
        setSong((Song)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.FILE__PHRASES:
        getPhrases().clear();
        return;
      case DslPackage.FILE__SONG:
        setSong((Song)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.FILE__PHRASES:
        return phrases != null && !phrases.isEmpty();
      case DslPackage.FILE__SONG:
        return song != null;
    }
    return super.eIsSet(featureID);
  }

} //FileImpl
