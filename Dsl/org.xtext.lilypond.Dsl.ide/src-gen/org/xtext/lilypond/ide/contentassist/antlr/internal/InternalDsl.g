/*
 * generated by Xtext 2.25.0
 */
grammar InternalDsl;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.xtext.lilypond.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.xtext.lilypond.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.xtext.lilypond.services.DslGrammarAccess;

}
@parser::members {
	private DslGrammarAccess grammarAccess;

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleFile
entryRuleFile
:
{ before(grammarAccess.getFileRule()); }
	 ruleFile
{ after(grammarAccess.getFileRule()); } 
	 EOF 
;

// Rule File
ruleFile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFileAccess().getGroup()); }
		(rule__File__Group__0)
		{ after(grammarAccess.getFileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePhrase
entryRulePhrase
:
{ before(grammarAccess.getPhraseRule()); }
	 rulePhrase
{ after(grammarAccess.getPhraseRule()); } 
	 EOF 
;

// Rule Phrase
rulePhrase 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPhraseAccess().getGroup()); }
		(rule__Phrase__Group__0)
		{ after(grammarAccess.getPhraseAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleSong
entryRuleSong
:
{ before(grammarAccess.getSongRule()); }
	 ruleSong
{ after(grammarAccess.getSongRule()); } 
	 EOF 
;

// Rule Song
ruleSong 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSongAccess().getGroup()); }
		(rule__Song__Group__0)
		{ after(grammarAccess.getSongAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleBody
entryRuleBody
:
{ before(grammarAccess.getBodyRule()); }
	 ruleBody
{ after(grammarAccess.getBodyRule()); } 
	 EOF 
;

// Rule Body
ruleBody 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getBodyAccess().getGroup()); }
		(rule__Body__Group__0)
		{ after(grammarAccess.getBodyAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItem
entryRuleItem
:
{ before(grammarAccess.getItemRule()); }
	 ruleItem
{ after(grammarAccess.getItemRule()); } 
	 EOF 
;

// Rule Item
ruleItem 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItemAccess().getAlternatives()); }
		(rule__Item__Alternatives)
		{ after(grammarAccess.getItemAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleNote
entryRuleNote
:
{ before(grammarAccess.getNoteRule()); }
	 ruleNote
{ after(grammarAccess.getNoteRule()); } 
	 EOF 
;

// Rule Note
ruleNote 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getNoteAccess().getGroup()); }
		(rule__Note__Group__0)
		{ after(grammarAccess.getNoteAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOctave
entryRuleOctave
:
{ before(grammarAccess.getOctaveRule()); }
	 ruleOctave
{ after(grammarAccess.getOctaveRule()); } 
	 EOF 
;

// Rule Octave
ruleOctave 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOctaveAccess().getAlternatives()); }
		(rule__Octave__Alternatives)
		{ after(grammarAccess.getOctaveAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule NoteName
ruleNoteName
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteNameAccess().getAlternatives()); }
		(rule__NoteName__Alternatives)
		{ after(grammarAccess.getNoteNameAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemAccess().getGroup_0()); }
		(rule__Item__Group_0__0)
		{ after(grammarAccess.getItemAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getItemAccess().getGroup_1()); }
		(rule__Item__Group_1__0)
		{ after(grammarAccess.getItemAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOctaveAccess().getGroup_0()); }
		(rule__Octave__Group_0__0)
		{ after(grammarAccess.getOctaveAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getOctaveAccess().getGroup_1()); }
		(rule__Octave__Group_1__0)
		{ after(grammarAccess.getOctaveAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__NoteName__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteNameAccess().getAEnumLiteralDeclaration_0()); }
		('a')
		{ after(grammarAccess.getNoteNameAccess().getAEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getNoteNameAccess().getBEnumLiteralDeclaration_1()); }
		('b')
		{ after(grammarAccess.getNoteNameAccess().getBEnumLiteralDeclaration_1()); }
	)
	|
	(
		{ before(grammarAccess.getNoteNameAccess().getCEnumLiteralDeclaration_2()); }
		('c')
		{ after(grammarAccess.getNoteNameAccess().getCEnumLiteralDeclaration_2()); }
	)
	|
	(
		{ before(grammarAccess.getNoteNameAccess().getDEnumLiteralDeclaration_3()); }
		('d')
		{ after(grammarAccess.getNoteNameAccess().getDEnumLiteralDeclaration_3()); }
	)
	|
	(
		{ before(grammarAccess.getNoteNameAccess().getEEnumLiteralDeclaration_4()); }
		('e')
		{ after(grammarAccess.getNoteNameAccess().getEEnumLiteralDeclaration_4()); }
	)
	|
	(
		{ before(grammarAccess.getNoteNameAccess().getFEnumLiteralDeclaration_5()); }
		('f')
		{ after(grammarAccess.getNoteNameAccess().getFEnumLiteralDeclaration_5()); }
	)
	|
	(
		{ before(grammarAccess.getNoteNameAccess().getGEnumLiteralDeclaration_6()); }
		('g')
		{ after(grammarAccess.getNoteNameAccess().getGEnumLiteralDeclaration_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__0__Impl
	rule__File__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getFileAction_0()); }
	()
	{ after(grammarAccess.getFileAccess().getFileAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__1__Impl
	rule__File__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getPhrasesAssignment_1()); }
	(rule__File__PhrasesAssignment_1)*
	{ after(grammarAccess.getFileAccess().getPhrasesAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__2__Impl
	rule__File__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getSongAssignment_2()); }
	(rule__File__SongAssignment_2)
	{ after(grammarAccess.getFileAccess().getSongAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__File__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__File__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFileAccess().getPhrasesAssignment_3()); }
	(rule__File__PhrasesAssignment_3)*
	{ after(grammarAccess.getFileAccess().getPhrasesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Phrase__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phrase__Group__0__Impl
	rule__Phrase__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhraseAccess().getPhraseAction_0()); }
	()
	{ after(grammarAccess.getPhraseAccess().getPhraseAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phrase__Group__1__Impl
	rule__Phrase__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhraseAccess().getPhraseKeyword_1()); }
	'phrase'
	{ after(grammarAccess.getPhraseAccess().getPhraseKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phrase__Group__2__Impl
	rule__Phrase__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhraseAccess().getNameAssignment_2()); }
	(rule__Phrase__NameAssignment_2)
	{ after(grammarAccess.getPhraseAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Phrase__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPhraseAccess().getBodyAssignment_3()); }
	(rule__Phrase__BodyAssignment_3)
	{ after(grammarAccess.getPhraseAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Song__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Song__Group__0__Impl
	rule__Song__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSongAccess().getSongAction_0()); }
	()
	{ after(grammarAccess.getSongAccess().getSongAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Song__Group__1__Impl
	rule__Song__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSongAccess().getSongKeyword_1()); }
	'song'
	{ after(grammarAccess.getSongAccess().getSongKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Song__Group__2__Impl
	rule__Song__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSongAccess().getNameAssignment_2()); }
	(rule__Song__NameAssignment_2)
	{ after(grammarAccess.getSongAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Song__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSongAccess().getBodyAssignment_3()); }
	(rule__Song__BodyAssignment_3)
	{ after(grammarAccess.getSongAccess().getBodyAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Body__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__0__Impl
	rule__Body__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getBodyAction_0()); }
	()
	{ after(grammarAccess.getBodyAccess().getBodyAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__1__Impl
	rule__Body__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1()); }
	'{'
	{ after(grammarAccess.getBodyAccess().getLeftCurlyBracketKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__2__Impl
	rule__Body__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getContentAssignment_2()); }
	(rule__Body__ContentAssignment_2)*
	{ after(grammarAccess.getBodyAccess().getContentAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Body__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_3()); }
	'}'
	{ after(grammarAccess.getBodyAccess().getRightCurlyBracketKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Item__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group_0__0__Impl
	rule__Item__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getNoteItemAction_0_0()); }
	()
	{ after(grammarAccess.getItemAccess().getNoteItemAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getNoteAssignment_0_1()); }
	(rule__Item__NoteAssignment_0_1)
	{ after(grammarAccess.getItemAccess().getNoteAssignment_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Item__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group_1__0__Impl
	rule__Item__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getPhraseItemAction_1_0()); }
	()
	{ after(grammarAccess.getItemAccess().getPhraseItemAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group_1__1__Impl
	rule__Item__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getBackslashKeyword_1_1()); }
	'\\'
	{ after(grammarAccess.getItemAccess().getBackslashKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Item__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getItemAccess().getPhraseAssignment_1_2()); }
	(rule__Item__PhraseAssignment_1_2)
	{ after(grammarAccess.getItemAccess().getPhraseAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Note__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Note__Group__0__Impl
	rule__Note__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteAccess().getNoteAction_0()); }
	()
	{ after(grammarAccess.getNoteAccess().getNoteAction_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Note__Group__1__Impl
	rule__Note__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteAccess().getNameAssignment_1()); }
	(rule__Note__NameAssignment_1)
	{ after(grammarAccess.getNoteAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Note__Group__2__Impl
	rule__Note__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteAccess().getOctaveAssignment_2()); }
	(rule__Note__OctaveAssignment_2)?
	{ after(grammarAccess.getNoteAccess().getOctaveAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Note__Group__3__Impl
	rule__Note__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteAccess().getDurationAssignment_3()); }
	(rule__Note__DurationAssignment_3)
	{ after(grammarAccess.getNoteAccess().getDurationAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Note__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getNoteAccess().getSyllableAssignment_4()); }
	(rule__Note__SyllableAssignment_4)?
	{ after(grammarAccess.getNoteAccess().getSyllableAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Octave__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Octave__Group_0__0__Impl
	rule__Octave__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOctaveAccess().getIsAction_0_0()); }
	()
	{ after(grammarAccess.getOctaveAccess().getIsAction_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Octave__Group_0__1__Impl
	rule__Octave__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOctaveAccess().getPlusSignKeyword_0_1()); }
	'+'
	{ after(grammarAccess.getOctaveAccess().getPlusSignKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Octave__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOctaveAccess().getValueAssignment_0_2()); }
	(rule__Octave__ValueAssignment_0_2)
	{ after(grammarAccess.getOctaveAccess().getValueAssignment_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Octave__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Octave__Group_1__0__Impl
	rule__Octave__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOctaveAccess().getEsAction_1_0()); }
	()
	{ after(grammarAccess.getOctaveAccess().getEsAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Octave__Group_1__1__Impl
	rule__Octave__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOctaveAccess().getHyphenMinusKeyword_1_1()); }
	'-'
	{ after(grammarAccess.getOctaveAccess().getHyphenMinusKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Octave__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOctaveAccess().getValueAssignment_1_2()); }
	(rule__Octave__ValueAssignment_1_2)
	{ after(grammarAccess.getOctaveAccess().getValueAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__File__PhrasesAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getPhrasesPhraseParserRuleCall_1_0()); }
		rulePhrase
		{ after(grammarAccess.getFileAccess().getPhrasesPhraseParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__SongAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getSongSongParserRuleCall_2_0()); }
		ruleSong
		{ after(grammarAccess.getFileAccess().getSongSongParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__File__PhrasesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getFileAccess().getPhrasesPhraseParserRuleCall_3_0()); }
		rulePhrase
		{ after(grammarAccess.getFileAccess().getPhrasesPhraseParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhraseAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getPhraseAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Phrase__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPhraseAccess().getBodyBodyParserRuleCall_3_0()); }
		ruleBody
		{ after(grammarAccess.getPhraseAccess().getBodyBodyParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSongAccess().getNameSTRINGTerminalRuleCall_2_0()); }
		RULE_STRING
		{ after(grammarAccess.getSongAccess().getNameSTRINGTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Song__BodyAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSongAccess().getBodyBodyParserRuleCall_3_0()); }
		ruleBody
		{ after(grammarAccess.getSongAccess().getBodyBodyParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Body__ContentAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBodyAccess().getContentItemParserRuleCall_2_0()); }
		ruleItem
		{ after(grammarAccess.getBodyAccess().getContentItemParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__NoteAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemAccess().getNoteNoteParserRuleCall_0_1_0()); }
		ruleNote
		{ after(grammarAccess.getItemAccess().getNoteNoteParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Item__PhraseAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemAccess().getPhraseIDTerminalRuleCall_1_2_0()); }
		RULE_ID
		{ after(grammarAccess.getItemAccess().getPhraseIDTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteAccess().getNameNoteNameEnumRuleCall_1_0()); }
		ruleNoteName
		{ after(grammarAccess.getNoteAccess().getNameNoteNameEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__OctaveAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteAccess().getOctaveOctaveParserRuleCall_2_0()); }
		ruleOctave
		{ after(grammarAccess.getNoteAccess().getOctaveOctaveParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__DurationAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteAccess().getDurationINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getNoteAccess().getDurationINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Note__SyllableAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getNoteAccess().getSyllableSTRINGTerminalRuleCall_4_0()); }
		RULE_STRING
		{ after(grammarAccess.getNoteAccess().getSyllableSTRINGTerminalRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__ValueAssignment_0_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOctaveAccess().getValueINTTerminalRuleCall_0_2_0()); }
		RULE_INT
		{ after(grammarAccess.getOctaveAccess().getValueINTTerminalRuleCall_0_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Octave__ValueAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOctaveAccess().getValueINTTerminalRuleCall_1_2_0()); }
		RULE_INT
		{ after(grammarAccess.getOctaveAccess().getValueINTTerminalRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
