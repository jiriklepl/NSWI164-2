/*
 * generated by Xtext 2.25.0
 */
package org.xtext.lilypond.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.lilypond.ide.contentassist.antlr.internal.InternalDslParser;
import org.xtext.lilypond.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getItemAccess().getAlternatives(), "rule__Item__Alternatives");
			builder.put(grammarAccess.getOctaveAccess().getAlternatives(), "rule__Octave__Alternatives");
			builder.put(grammarAccess.getNoteNameAccess().getAlternatives(), "rule__NoteName__Alternatives");
			builder.put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
			builder.put(grammarAccess.getPhraseAccess().getGroup(), "rule__Phrase__Group__0");
			builder.put(grammarAccess.getSongAccess().getGroup(), "rule__Song__Group__0");
			builder.put(grammarAccess.getBodyAccess().getGroup(), "rule__Body__Group__0");
			builder.put(grammarAccess.getItemAccess().getGroup_0(), "rule__Item__Group_0__0");
			builder.put(grammarAccess.getItemAccess().getGroup_1(), "rule__Item__Group_1__0");
			builder.put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
			builder.put(grammarAccess.getOctaveAccess().getGroup_0(), "rule__Octave__Group_0__0");
			builder.put(grammarAccess.getOctaveAccess().getGroup_1(), "rule__Octave__Group_1__0");
			builder.put(grammarAccess.getFileAccess().getPhrasesAssignment_1(), "rule__File__PhrasesAssignment_1");
			builder.put(grammarAccess.getFileAccess().getSongAssignment_2(), "rule__File__SongAssignment_2");
			builder.put(grammarAccess.getFileAccess().getPhrasesAssignment_3(), "rule__File__PhrasesAssignment_3");
			builder.put(grammarAccess.getPhraseAccess().getNameAssignment_2(), "rule__Phrase__NameAssignment_2");
			builder.put(grammarAccess.getPhraseAccess().getBodyAssignment_3(), "rule__Phrase__BodyAssignment_3");
			builder.put(grammarAccess.getSongAccess().getNameAssignment_2(), "rule__Song__NameAssignment_2");
			builder.put(grammarAccess.getSongAccess().getBodyAssignment_3(), "rule__Song__BodyAssignment_3");
			builder.put(grammarAccess.getBodyAccess().getContentAssignment_2(), "rule__Body__ContentAssignment_2");
			builder.put(grammarAccess.getItemAccess().getNoteAssignment_0_1(), "rule__Item__NoteAssignment_0_1");
			builder.put(grammarAccess.getItemAccess().getPhraseAssignment_1_2(), "rule__Item__PhraseAssignment_1_2");
			builder.put(grammarAccess.getNoteAccess().getNameAssignment_1(), "rule__Note__NameAssignment_1");
			builder.put(grammarAccess.getNoteAccess().getOctaveAssignment_2(), "rule__Note__OctaveAssignment_2");
			builder.put(grammarAccess.getNoteAccess().getDurationAssignment_3(), "rule__Note__DurationAssignment_3");
			builder.put(grammarAccess.getNoteAccess().getSyllableAssignment_4(), "rule__Note__SyllableAssignment_4");
			builder.put(grammarAccess.getOctaveAccess().getValueAssignment_0_2(), "rule__Octave__ValueAssignment_0_2");
			builder.put(grammarAccess.getOctaveAccess().getValueAssignment_1_2(), "rule__Octave__ValueAssignment_1_2");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
