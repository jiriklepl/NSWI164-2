/**
 * generated by Xtext 2.25.0
 */
package org.xtext.lilypond.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.lilypond.lilyPond.Absolute;
import org.xtext.lilypond.lilyPond.Commas;
import org.xtext.lilypond.lilyPond.File;
import org.xtext.lilypond.lilyPond.Header;
import org.xtext.lilypond.lilyPond.Key;
import org.xtext.lilypond.lilyPond.Lyrics;
import org.xtext.lilypond.lilyPond.Note;
import org.xtext.lilypond.lilyPond.NoteName;
import org.xtext.lilypond.lilyPond.OctaveRep;
import org.xtext.lilypond.lilyPond.Quotes;
import org.xtext.lilypond.lilyPond.Score;
import org.xtext.lilypond.lilyPond.Staff;
import org.xtext.lilypond.lilyPond.Time;
import org.xtext.lilypond.lilyPond.Title;
import org.xtext.lilypond.lilyPond.Version;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class LilyPondGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<File> _filter = Iterables.<File>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), File.class);
    for (final File f : _filter) {
      fsa.generateFile("output.lilypond", this.compile(f));
    }
  }
  
  public CharSequence compile(final File f) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _compile = this.compile(f.getVersion());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _compile_1 = this.compile(f.getHeader());
    _builder.append(_compile_1);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _compile_2 = this.compile(f.getScore());
    _builder.append(_compile_2);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence compile(final Version v) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\version ");
    String _value = v.getValue();
    _builder.append(_value);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence compile(final Header h) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\header {");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _compile = this.compile(h.getTitle());
    _builder.append(_compile, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compile(final Title t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("title = ");
    String _value = t.getValue();
    _builder.append(_value);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence compile(final Score s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\score {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<<");
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _compile = this.compile(s.getStaff());
    _builder.append(_compile, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t\t");
    CharSequence _compile_1 = this.compile(s.getLyrics());
    _builder.append(_compile_1, "\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append(">>");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compile(final Staff s) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\new Staff {");
    _builder.newLine();
    _builder.append("\t");
    CharSequence _compile = this.compile(s.getKey());
    _builder.append(_compile, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _compile_1 = this.compile(s.getTime());
    _builder.append(_compile_1, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    CharSequence _compile_2 = this.compile(s.getAbsolute());
    _builder.append(_compile_2, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compile(final Lyrics l) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\addlyrics {");
    _builder.newLine();
    {
      EList<String> _syllables = l.getSyllables();
      for(final String s : _syllables) {
        _builder.append("\t");
        _builder.append(s, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compile(final Key k) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\key c \\major");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compile(final Time t) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\time 4/4");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compile(final Absolute a) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\\absolute {");
    _builder.newLine();
    {
      EList<Note> _items = a.getItems();
      for(final Note n : _items) {
        _builder.append("\t");
        CharSequence _compile = this.compile(n);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence compile(final Note n) {
    StringConcatenation _builder = new StringConcatenation();
    NoteName _name = n.getName();
    _builder.append(_name);
    CharSequence _compile = this.compile(n.getOctave());
    _builder.append(_compile);
    int _duration = n.getDuration();
    _builder.append(_duration);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  private CharSequence compile(final OctaveRep or) {
    CharSequence _switchResult = null;
    boolean _matched = false;
    if (or instanceof Quotes) {
      _matched=true;
      StringConcatenation _builder = new StringConcatenation();
      {
        EList<Character> _value = ((Quotes)or).getValue();
        for(final Character q : _value) {
          _builder.append(q);
        }
      }
      _switchResult = _builder;
    }
    if (!_matched) {
      if (or instanceof Commas) {
        _matched=true;
        StringConcatenation _builder = new StringConcatenation();
        {
          EList<Character> _value = ((Commas)or).getValue();
          for(final Character c : _value) {
            _builder.append(c);
          }
        }
        _switchResult = _builder;
      }
    }
    return _switchResult;
  }
}
