/*
 * generated by Xtext 2.25.0
 */
grammar InternalLilyPond;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.xtext.lilypond.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.xtext.lilypond.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.xtext.lilypond.services.LilyPondGrammarAccess;

}

@parser::members {

 	private LilyPondGrammarAccess grammarAccess;

    public InternalLilyPondParser(TokenStream input, LilyPondGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "File";
   	}

   	@Override
   	protected LilyPondGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleFile
entryRuleFile returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFileRule()); }
	iv_ruleFile=ruleFile
	{ $current=$iv_ruleFile.current; }
	EOF;

// Rule File
ruleFile returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getFileAccess().getFileAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getVersionVersionParserRuleCall_1_0());
				}
				lv_version_1_0=ruleVersion
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					set(
						$current,
						"version",
						lv_version_1_0,
						"org.xtext.lilypond.LilyPond.Version");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getHeaderHeaderParserRuleCall_2_0());
				}
				lv_header_2_0=ruleHeader
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					set(
						$current,
						"header",
						lv_header_2_0,
						"org.xtext.lilypond.LilyPond.Header");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getFileAccess().getScoreScoreParserRuleCall_3_0());
				}
				lv_score_3_0=ruleScore
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFileRule());
					}
					set(
						$current,
						"score",
						lv_score_3_0,
						"org.xtext.lilypond.LilyPond.Score");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleVersion
entryRuleVersion returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVersionRule()); }
	iv_ruleVersion=ruleVersion
	{ $current=$iv_ruleVersion.current; }
	EOF;

// Rule Version
ruleVersion returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVersionAccess().getVersionAction_0(),
					$current);
			}
		)
		otherlv_1='\\version'
		{
			newLeafNode(otherlv_1, grammarAccess.getVersionAccess().getVersionKeyword_1());
		}
		(
			(
				lv_value_2_0=RULE_STRING
				{
					newLeafNode(lv_value_2_0, grammarAccess.getVersionAccess().getValueSTRINGTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVersionRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_2_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleHeader
entryRuleHeader returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHeaderRule()); }
	iv_ruleHeader=ruleHeader
	{ $current=$iv_ruleHeader.current; }
	EOF;

// Rule Header
ruleHeader returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHeaderAccess().getHeaderAction_0(),
					$current);
			}
		)
		otherlv_1='\\header'
		{
			newLeafNode(otherlv_1, grammarAccess.getHeaderAccess().getHeaderKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getHeaderAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHeaderAccess().getTitleTitleParserRuleCall_3_0());
				}
				lv_title_3_0=ruleTitle
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHeaderRule());
					}
					set(
						$current,
						"title",
						lv_title_3_0,
						"org.xtext.lilypond.LilyPond.Title");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getHeaderAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleTitle
entryRuleTitle returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTitleRule()); }
	iv_ruleTitle=ruleTitle
	{ $current=$iv_ruleTitle.current; }
	EOF;

// Rule Title
ruleTitle returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTitleAccess().getTitleAction_0(),
					$current);
			}
		)
		otherlv_1='title'
		{
			newLeafNode(otherlv_1, grammarAccess.getTitleAccess().getTitleKeyword_1());
		}
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getTitleAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_STRING
				{
					newLeafNode(lv_value_3_0, grammarAccess.getTitleAccess().getValueSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTitleRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleScore
entryRuleScore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScoreRule()); }
	iv_ruleScore=ruleScore
	{ $current=$iv_ruleScore.current; }
	EOF;

// Rule Score
ruleScore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getScoreAccess().getScoreAction_0(),
					$current);
			}
		)
		otherlv_1='\\score'
		{
			newLeafNode(otherlv_1, grammarAccess.getScoreAccess().getScoreKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getScoreAccess().getLeftCurlyBracketKeyword_2());
		}
		otherlv_3='<<'
		{
			newLeafNode(otherlv_3, grammarAccess.getScoreAccess().getLessThanSignLessThanSignKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScoreAccess().getStaffStaffParserRuleCall_4_0());
				}
				lv_staff_4_0=ruleStaff
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScoreRule());
					}
					set(
						$current,
						"staff",
						lv_staff_4_0,
						"org.xtext.lilypond.LilyPond.Staff");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScoreAccess().getLyricsLyricsParserRuleCall_5_0());
				}
				lv_lyrics_5_0=ruleLyrics
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScoreRule());
					}
					set(
						$current,
						"lyrics",
						lv_lyrics_5_0,
						"org.xtext.lilypond.LilyPond.Lyrics");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_6='>>'
		{
			newLeafNode(otherlv_6, grammarAccess.getScoreAccess().getGreaterThanSignGreaterThanSignKeyword_6());
		}
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getScoreAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleStaff
entryRuleStaff returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStaffRule()); }
	iv_ruleStaff=ruleStaff
	{ $current=$iv_ruleStaff.current; }
	EOF;

// Rule Staff
ruleStaff returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getStaffAccess().getStaffAction_0(),
					$current);
			}
		)
		otherlv_1='\\new'
		{
			newLeafNode(otherlv_1, grammarAccess.getStaffAccess().getNewKeyword_1());
		}
		otherlv_2='Staff'
		{
			newLeafNode(otherlv_2, grammarAccess.getStaffAccess().getStaffKeyword_2());
		}
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getStaffAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getStaffAccess().getKeyKeyParserRuleCall_4_0());
				}
				lv_key_4_0=ruleKey
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStaffRule());
					}
					set(
						$current,
						"key",
						lv_key_4_0,
						"org.xtext.lilypond.LilyPond.Key");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStaffAccess().getTimeTimeParserRuleCall_5_0());
				}
				lv_time_5_0=ruleTime
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStaffRule());
					}
					set(
						$current,
						"time",
						lv_time_5_0,
						"org.xtext.lilypond.LilyPond.Time");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getStaffAccess().getAbsoluteAbsoluteParserRuleCall_6_0());
				}
				lv_absolute_6_0=ruleAbsolute
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getStaffRule());
					}
					set(
						$current,
						"absolute",
						lv_absolute_6_0,
						"org.xtext.lilypond.LilyPond.Absolute");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_7='}'
		{
			newLeafNode(otherlv_7, grammarAccess.getStaffAccess().getRightCurlyBracketKeyword_7());
		}
	)
;

// Entry rule entryRuleKey
entryRuleKey returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getKeyRule()); }
	iv_ruleKey=ruleKey
	{ $current=$iv_ruleKey.current; }
	EOF;

// Rule Key
ruleKey returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getKeyAccess().getKeyAction_0(),
					$current);
			}
		)
		otherlv_1='\\key'
		{
			newLeafNode(otherlv_1, grammarAccess.getKeyAccess().getKeyKeyword_1());
		}
		otherlv_2='c'
		{
			newLeafNode(otherlv_2, grammarAccess.getKeyAccess().getCKeyword_2());
		}
		otherlv_3='\\major'
		{
			newLeafNode(otherlv_3, grammarAccess.getKeyAccess().getMajorKeyword_3());
		}
	)
;

// Entry rule entryRuleTime
entryRuleTime returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTimeRule()); }
	iv_ruleTime=ruleTime
	{ $current=$iv_ruleTime.current; }
	EOF;

// Rule Time
ruleTime returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getTimeAccess().getTimeAction_0(),
					$current);
			}
		)
		otherlv_1='\\time'
		{
			newLeafNode(otherlv_1, grammarAccess.getTimeAccess().getTimeKeyword_1());
		}
		otherlv_2='4/4'
		{
			newLeafNode(otherlv_2, grammarAccess.getTimeAccess().getDigitFourSolidusDigitFourKeyword_2());
		}
	)
;

// Entry rule entryRuleAbsolute
entryRuleAbsolute returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAbsoluteRule()); }
	iv_ruleAbsolute=ruleAbsolute
	{ $current=$iv_ruleAbsolute.current; }
	EOF;

// Rule Absolute
ruleAbsolute returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getAbsoluteAccess().getAbsoluteAction_0(),
					$current);
			}
		)
		otherlv_1='\\absolute'
		{
			newLeafNode(otherlv_1, grammarAccess.getAbsoluteAccess().getAbsoluteKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getAbsoluteAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAbsoluteAccess().getItemsNoteParserRuleCall_3_0());
				}
				lv_items_3_0=ruleNote
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAbsoluteRule());
					}
					add(
						$current,
						"items",
						lv_items_3_0,
						"org.xtext.lilypond.LilyPond.Note");
					afterParserOrEnumRuleCall();
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getAbsoluteAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Entry rule entryRuleNote
entryRuleNote returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getNoteRule()); }
	iv_ruleNote=ruleNote
	{ $current=$iv_ruleNote.current; }
	EOF;

// Rule Note
ruleNote returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getNoteAccess().getNoteAction_0(),
					$current);
			}
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNoteAccess().getNameNoteNameEnumRuleCall_1_0());
				}
				lv_name_1_0=ruleNoteName
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNoteRule());
					}
					set(
						$current,
						"name",
						lv_name_1_0,
						"org.xtext.lilypond.LilyPond.NoteName");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getNoteAccess().getOctaveOctaveRepParserRuleCall_2_0());
				}
				lv_octave_2_0=ruleOctaveRep
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getNoteRule());
					}
					set(
						$current,
						"octave",
						lv_octave_2_0,
						"org.xtext.lilypond.LilyPond.OctaveRep");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				lv_duration_3_0=RULE_INT
				{
					newLeafNode(lv_duration_3_0, grammarAccess.getNoteAccess().getDurationINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getNoteRule());
					}
					setWithLastConsumed(
						$current,
						"duration",
						lv_duration_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleOctaveRep
entryRuleOctaveRep returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOctaveRepRule()); }
	iv_ruleOctaveRep=ruleOctaveRep
	{ $current=$iv_ruleOctaveRep.current; }
	EOF;

// Rule OctaveRep
ruleOctaveRep returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOctaveRepAccess().getQuotesAction_0_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOctaveRepAccess().getValueQuoteParserRuleCall_0_1_0());
					}
					lv_value_1_0=ruleQuote
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOctaveRepRule());
						}
						add(
							$current,
							"value",
							lv_value_1_0,
							"org.xtext.lilypond.LilyPond.Quote");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
		    |
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getOctaveRepAccess().getCommasAction_1_0(),
						$current);
				}
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getOctaveRepAccess().getValueCommaParserRuleCall_1_1_0());
					}
					lv_value_3_0=ruleComma
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getOctaveRepRule());
						}
						add(
							$current,
							"value",
							lv_value_3_0,
							"org.xtext.lilypond.LilyPond.Comma");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)
	)
;

// Entry rule entryRuleQuote
entryRuleQuote returns [String current=null]:
	{ newCompositeNode(grammarAccess.getQuoteRule()); }
	iv_ruleQuote=ruleQuote
	{ $current=$iv_ruleQuote.current.getText(); }
	EOF;

// Rule Quote
ruleQuote returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='\''
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getQuoteAccess().getApostropheKeyword());
	}
;

// Entry rule entryRuleComma
entryRuleComma returns [String current=null]:
	{ newCompositeNode(grammarAccess.getCommaRule()); }
	iv_ruleComma=ruleComma
	{ $current=$iv_ruleComma.current.getText(); }
	EOF;

// Rule Comma
ruleComma returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw=','
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getCommaAccess().getCommaKeyword());
	}
;

// Entry rule entryRuleLyrics
entryRuleLyrics returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLyricsRule()); }
	iv_ruleLyrics=ruleLyrics
	{ $current=$iv_ruleLyrics.current; }
	EOF;

// Rule Lyrics
ruleLyrics returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getLyricsAccess().getLyricsAction_0(),
					$current);
			}
		)
		otherlv_1='\\addlyrics'
		{
			newLeafNode(otherlv_1, grammarAccess.getLyricsAccess().getAddlyricsKeyword_1());
		}
		otherlv_2='{'
		{
			newLeafNode(otherlv_2, grammarAccess.getLyricsAccess().getLeftCurlyBracketKeyword_2());
		}
		(
			(
				lv_syllables_3_0=RULE_STRING
				{
					newLeafNode(lv_syllables_3_0, grammarAccess.getLyricsAccess().getSyllablesSTRINGTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLyricsRule());
					}
					addWithLastConsumed(
						$current,
						"syllables",
						lv_syllables_3_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)*
		otherlv_4='}'
		{
			newLeafNode(otherlv_4, grammarAccess.getLyricsAccess().getRightCurlyBracketKeyword_4());
		}
	)
;

// Rule NoteName
ruleNoteName returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='a'
			{
				$current = grammarAccess.getNoteNameAccess().getAEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getNoteNameAccess().getAEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='b'
			{
				$current = grammarAccess.getNoteNameAccess().getBEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getNoteNameAccess().getBEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='c'
			{
				$current = grammarAccess.getNoteNameAccess().getCEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getNoteNameAccess().getCEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='d'
			{
				$current = grammarAccess.getNoteNameAccess().getDEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getNoteNameAccess().getDEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='e'
			{
				$current = grammarAccess.getNoteNameAccess().getEEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getNoteNameAccess().getEEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='f'
			{
				$current = grammarAccess.getNoteNameAccess().getFEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getNoteNameAccess().getFEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='g'
			{
				$current = grammarAccess.getNoteNameAccess().getGEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getNoteNameAccess().getGEnumLiteralDeclaration_6());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
