/*
 * generated by Xtext 2.25.0
 */
package org.xtext.lilypond.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import org.xtext.lilypond.lilyPond.File
import org.xtext.lilypond.lilyPond.Version
import org.xtext.lilypond.lilyPond.Header
import org.xtext.lilypond.lilyPond.Title
import org.xtext.lilypond.lilyPond.Score
import org.xtext.lilypond.lilyPond.Staff
import org.xtext.lilypond.lilyPond.Lyrics
import org.xtext.lilypond.lilyPond.Key
import org.xtext.lilypond.lilyPond.Time
import org.xtext.lilypond.lilyPond.Absolute
import org.xtext.lilypond.lilyPond.Note
import org.xtext.lilypond.lilyPond.OctaveRep
import org.xtext.lilypond.lilyPond.Quotes
import org.xtext.lilypond.lilyPond.Commas

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class LilyPondGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for (f : resource.allContents.toIterable.filter(File)) {
	        fsa.generateFile("output.lilypond", f.compile)
	    }
	}
	
	def compile(File f) '''
		«f.version.compile»

		«f.header.compile»

		«f.score.compile»
'''

	private def compile(Version v) '''
		\version «v.value»
'''

	private def compile(Header h) '''
		\header {
			«h.title.compile»
		}
'''

	private def compile(Title t) '''
		title = «t.value»
'''

	private def compile(Score s) '''
		\score {
			<<
				«s.staff.compile»

				«s.lyrics.compile»
			>>
		}
'''

	private def compile(Staff s) '''
		\new Staff {
			«s.key.compile»
			«s.time.compile»
			«s.absolute.compile»
		}
'''

	private def compile(Lyrics l) '''
		\addlyrics {
			«FOR s : l.syllables»
				«s»
			«ENDFOR»
		}
'''

	private def compile(Key k) '''
		\key c \major
'''

	private def compile(Time t) '''
		\time 4/4
'''

	private def compile(Absolute a) '''
		\absolute {
			«FOR n : a.items»
				«n.compile»
			«ENDFOR»
		}
'''

	private def compile(Note n) '''
		«n.name»«n.octave.compile»«n.duration»
'''

	private def compile(OctaveRep or) {
		switch or {
			Quotes: '''«FOR q : or.value»«q»«ENDFOR»'''
			Commas: '''«FOR c : or.value»«c»«ENDFOR»'''
		}
	}
}
