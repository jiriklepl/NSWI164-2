/*
 * generated by Xtext 2.25.0
 */
package org.xtext.lilypond.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.xtext.lilypond.ide.contentassist.antlr.internal.InternalLilyPondParser;
import org.xtext.lilypond.services.LilyPondGrammarAccess;

public class LilyPondParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(LilyPondGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, LilyPondGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getOctaveRepAccess().getAlternatives(), "rule__OctaveRep__Alternatives");
			builder.put(grammarAccess.getNoteNameAccess().getAlternatives(), "rule__NoteName__Alternatives");
			builder.put(grammarAccess.getFileAccess().getGroup(), "rule__File__Group__0");
			builder.put(grammarAccess.getVersionAccess().getGroup(), "rule__Version__Group__0");
			builder.put(grammarAccess.getHeaderAccess().getGroup(), "rule__Header__Group__0");
			builder.put(grammarAccess.getTitleAccess().getGroup(), "rule__Title__Group__0");
			builder.put(grammarAccess.getScoreAccess().getGroup(), "rule__Score__Group__0");
			builder.put(grammarAccess.getStaffAccess().getGroup(), "rule__Staff__Group__0");
			builder.put(grammarAccess.getKeyAccess().getGroup(), "rule__Key__Group__0");
			builder.put(grammarAccess.getTimeAccess().getGroup(), "rule__Time__Group__0");
			builder.put(grammarAccess.getAbsoluteAccess().getGroup(), "rule__Absolute__Group__0");
			builder.put(grammarAccess.getNoteAccess().getGroup(), "rule__Note__Group__0");
			builder.put(grammarAccess.getOctaveRepAccess().getGroup_0(), "rule__OctaveRep__Group_0__0");
			builder.put(grammarAccess.getOctaveRepAccess().getGroup_1(), "rule__OctaveRep__Group_1__0");
			builder.put(grammarAccess.getLyricsAccess().getGroup(), "rule__Lyrics__Group__0");
			builder.put(grammarAccess.getFileAccess().getVersionAssignment_1(), "rule__File__VersionAssignment_1");
			builder.put(grammarAccess.getFileAccess().getHeaderAssignment_2(), "rule__File__HeaderAssignment_2");
			builder.put(grammarAccess.getFileAccess().getScoreAssignment_3(), "rule__File__ScoreAssignment_3");
			builder.put(grammarAccess.getVersionAccess().getValueAssignment_2(), "rule__Version__ValueAssignment_2");
			builder.put(grammarAccess.getHeaderAccess().getTitleAssignment_3(), "rule__Header__TitleAssignment_3");
			builder.put(grammarAccess.getTitleAccess().getValueAssignment_3(), "rule__Title__ValueAssignment_3");
			builder.put(grammarAccess.getScoreAccess().getStaffAssignment_4(), "rule__Score__StaffAssignment_4");
			builder.put(grammarAccess.getScoreAccess().getLyricsAssignment_5(), "rule__Score__LyricsAssignment_5");
			builder.put(grammarAccess.getStaffAccess().getKeyAssignment_4(), "rule__Staff__KeyAssignment_4");
			builder.put(grammarAccess.getStaffAccess().getTimeAssignment_5(), "rule__Staff__TimeAssignment_5");
			builder.put(grammarAccess.getStaffAccess().getAbsoluteAssignment_6(), "rule__Staff__AbsoluteAssignment_6");
			builder.put(grammarAccess.getAbsoluteAccess().getItemsAssignment_3(), "rule__Absolute__ItemsAssignment_3");
			builder.put(grammarAccess.getNoteAccess().getNameAssignment_1(), "rule__Note__NameAssignment_1");
			builder.put(grammarAccess.getNoteAccess().getOctaveAssignment_2(), "rule__Note__OctaveAssignment_2");
			builder.put(grammarAccess.getNoteAccess().getDurationAssignment_3(), "rule__Note__DurationAssignment_3");
			builder.put(grammarAccess.getOctaveRepAccess().getValueAssignment_0_1(), "rule__OctaveRep__ValueAssignment_0_1");
			builder.put(grammarAccess.getOctaveRepAccess().getValueAssignment_1_1(), "rule__OctaveRep__ValueAssignment_1_1");
			builder.put(grammarAccess.getLyricsAccess().getSyllablesAssignment_3(), "rule__Lyrics__SyllablesAssignment_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private LilyPondGrammarAccess grammarAccess;

	@Override
	protected InternalLilyPondParser createParser() {
		InternalLilyPondParser result = new InternalLilyPondParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LilyPondGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LilyPondGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
